-- @path MM=/TableToMap/MetaModels/Table_MetaModel.ecore
-- @path MM1=/TableToMap/MetaModels/Map_MetaModel.ecore


module TableToMap;
create OUT: MM1 from IN: MM;

rule Main {
	from
		Table: MM!Table
	to
		Maps: MM1!Maps ( 
			layers <- objectLayer
		),
		objectLayer: MM1!Layer(
			name <- Table.filename, -- file name // .eResource().getURI().lastSegment()
			data <- Table.rows -> collect(e | thisModule.GetLatLong(e))
		)
}
lazy rule GetLatLong {
	from
		Row: MM!Row
	to
		Data: MM1!Data (
			lat <- Row.getLatLongValue('lat'),
			long <- Row.getLatLongValue('long')
		)
}

helper context MM!Row def: getLatLongValue(type: String): String =
	let column: Integer = self.findCellPosition(type) in
	if column >= 0 then
		let cell: MM!Cell = self.cells -> get(column) in
		cell.value
	else
		'Value not found'
  endif;
	
helper context MM!Row def: findCellPosition(type: String) : Integer =
	if self.position = 0 then
		let cell : Integer = self.cells -> indexOf(self.cells -> select(c | c.value = type) -> first()) in
		if cell >= 1 then -- no empieza por 0, sino por 1
			cell-1 -- se ajusta la diferencia
		else
	    	-1
		endif
	else
		self.getFirstRow().findCellPosition(type)
	endif;

helper context MM!Row def: getFirstRow() : MM!Row =  -- Este helper devuelve la fila 0 para acceder a la posición de la celda "LAT" en la fila 0
	let table : MM!Table = self.eContainer() in
	table.rows -> first();